using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Models;
using ServicesFichiersInteractions;
using ServicesLogs;

namespace ProgrammeDeGestionDeCommandeDeChocolatCore
{
    public class ProgrammeCore : Exception
    {
        // static bool errorCase = false;
        public static void initialiserLesArticles()
        {
            List<Articles> tableaudArticles = new List<Articles>();
            tableaudArticles.Add(new Articles("Ferrero rocher - boîte de 16 chocolats", 2.83F, 50));
            tableaudArticles.Add(new Articles("Jeff De Bruges - boîte ronde de 26 chocolats assortis", 39.35F, 50));
            tableaudArticles.Add(new Articles("Lindt - Connaisseurs - boîte de 217 grammes d'assortiment de chocolats", 8.09F, 50));
            tableaudArticles.Add(new Articles("Lindt - Lindor - boîte de 200 grammes d'assortiment de chocolats", 3.91F, 50));
            tableaudArticles.Add(new Articles("Kinder Bueno - boîte de 10 unités", 6.59F, 50));
            foreach (var article in tableaudArticles)
            {
                Console.WriteLine($"ajout de {article.Quantite} unités pour l'article {article.Reference}, au prix unitaire de {article.Prix}");
            }
            Console.Read();
            Console.Read();
            ServicesLogs.ClassNLogJournalisation.LogArticlesContentsToJournalFile(tableaudArticles);
            // Console.Clear();
        }

        public static void ajouterAdministrateur0()
        {
            List<Administrateurs> tableaudAdministrateurs = new List<Administrateurs>();
            tableaudAdministrateurs.Add(new Administrateurs("Christophe", "Christophe57@CsharpExam"));
            foreach (var administrateur in tableaudAdministrateurs)
            {
                Console.WriteLine($"ajout de l'administrateur ayant pour login {administrateur.Login} et pour password {administrateur.Password}");
            }
            ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToJournalFile(tableaudAdministrateurs);
            ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToComptesAdminFile(tableaudAdministrateurs);
        }

        // demander à l'User d'abord de bien vouloir créer son compte
        public static void askAccountType()
        {
            Console.Clear();
            // Console.Read();
            Console.WriteLine("Quel compte souhaitez vous créer ? Quel est votre profil ?");
            Console.WriteLine("1: Utilisateur");
            Console.WriteLine("2: Administrateur");
            // int inputChoiceProfil = Convert.ToInt32(Console.ReadLine());
            var inputAccountType = Console.ReadLine(); // ReadLine returns string type
            Console.Read();
            checkTypeOfVariable(inputAccountType);
            // Console.WriteLine(inputAccountType+" "+inputAccountType.GetTypeCode());
            // Console.Read();

            /* List<Administrateurs> tableaudAdministrateurs = new List<Administrateurs>();
            tableaudAdministrateurs.Add(new Administrateurs("Christophe", "Christophe57@CsharpExam"));
            foreach (var administrateur in tableaudAdministrateurs)
            {
                Console.WriteLine($"ajout de l'administrateur ayant pour login {administrateur.Login} et pour password {administrateur.Password}");
            }
            ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToJournalFile(tableaudAdministrateurs);
            ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToComptesAdminFile(tableaudAdministrateurs); */
        }

        // Fonction pour vérifier la validité de la variable entrée par l'User
        public static void checkTypeOfVariable<T>(T inputAccountType)
        {
            // Console.WriteLine("Type : {0}, Valeur : {1}", typeof(T), inputAccountType); // 0 : le type et 1 sa valeur
            // Console.WriteLine(inputAccountType + " " + inputAccountType.GetType());
            // Console.Read();

            try
            {
                int inputAccountTypeInt = Convert.ToInt32(inputAccountType);
                // Console.WriteLine("inputAccountType " + inputAccountType.GetType());
                // Console.WriteLine("inputAccountTypeInt" + inputAccountTypeInt.GetType());
                Console.Read();
                Console.WriteLine("méthode checkTypeOfVariable()");
                // Console.WriteLine("voici votre choix : " + inputChoiceAccountType + " " + inputChoiceAccountType.GetType());
                Console.WriteLine("voici votre choix : " + inputAccountTypeInt);
                Console.Read();
                // Console.Clear();
                checkChoiceAccount(inputAccountTypeInt);
            }
            catch (Exception e)
            {
                // Console.WriteLine(inputAccountType + " " + inputAccountType.GetType());
                Console.WriteLine(inputAccountType.GetType() + " " + e.Message);
                Console.Read();
                Console.WriteLine("Le profil choisi ne fait pas partie des choix disponibles, entrez un choix correct, 1 ou 2, selon le profil de compte");
                Console.WriteLine("Quel est votre choix de profil de compte ?");
                Console.Read();
                // Console.Clear();
                askAccountType();
                // askAccountType(); malheureusement ne sors plus de la boucle une fois entré dans le catch, même avec des choix corrects dans askAccountType()
                /* Console.WriteLine($"{e.Message}");
                Console.Read(); */
            }
        }

        public static int checkChoiceAccount(int inputAccountTypeInt)
        {
            Console.WriteLine("méthode checkChoiceAccount()");
            Console.Read();
            if ((inputAccountTypeInt >= 3) || (inputAccountTypeInt < 0))
            {
                Console.WriteLine($"Le choix {inputAccountTypeInt} n'est pas un choix correct. Les seuls choix possibles sont 1 ou 2.");
                Console.Read();
                return -1;
            }
            switch (inputAccountTypeInt)
            {
                case 1:
                    Console.WriteLine($"En ayant choisi la valeur {inputAccountTypeInt}, cela signifie que vous souhaitez vous connecter en tant qu'Utilisateur dans cette application.");
                    Console.Read();
                    return inputAccountTypeInt;
                case 2:
                    Console.WriteLine($"En ayant choisi la valeur {inputAccountTypeInt}, cela signifie que vous souhaitez vous connecter en tant qu'Administrateur dans cette application.");
                    Console.Read();
                    createAdminAccount(inputAccountTypeInt);
                    return inputAccountTypeInt;
                default:
                    Console.WriteLine("Valeur inconnue au bataillon !");
                    Console.Read();
                    return -1;
            }
        }

        public static void createAdminAccount(int inputAccountTypeInt)
        {
            List<Administrateurs> tableaudAdministrateurs = new List<Administrateurs>();
            Console.WriteLine("Quel identifiant de connexion (login) voulez-vous ? - L'identifiant doit comprendre au moins trois caractères et ne pas dépasser 15 caractères");
            // j'assigne la variable de l'User à ma variable login - ReadLine retunrs string type
            var login = Console.ReadLine();
            checkValidateLogin(login);
            Console.WriteLine("Entrez le mot de passe de connexion (password) que vous souhaitez ?");
            var password = Console.ReadLine();
            checkValidatePassword(password);
            /* tableaudAdministrateurs.Add(new Administrateurs("Christophe", "Christophe57@CsharpExam"));
            foreach (var administrateur in tableaudAdministrateurs)
            {
                Console.WriteLine($"ajout de l'administrateur ayant pour login {administrateur.Login} et pour password {administrateur.Password}");
                ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToJournalFile(tableaudAdministrateurs);
                ServicesLogs.ClassNLogJournalisation.LogAdminstrateursToComptesAdminFile(tableaudAdministrateurs);
            } */
        }

        public static void checkValidatePassword(string password)
        {
            throw new NotImplementedException();
        }

        public static void checkValidateLogin(string login) 
        {
            if ((login.Length <= 2) || (login.Length > 15))
            {
                Console.WriteLine("Le login (identifiant) renseigné ne respecte pas les consignes ! au moins trois caractères et ne pas dépasser les 15 caractères");
            }
        }

    }
}
